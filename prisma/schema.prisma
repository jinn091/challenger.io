generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
    SUPER_ADMIN
}

enum WebHackingMethod {
    XSS
    SQL_INJECTION
    CSRF
    SSRF
    DIRECTORY_TRAVERSAL
    AUTHENTICATION_BYPASS
    SESSION_HIJACKING
    SUBDOMAIN_ENUMERATION
    API_SECURITY
    OPEN_REDIRECT
    CLICKJACKING
    FILE_UPLOAD_VULNERABILITY
    CSP_BYPASS
    BROKEN_ACCESS_CONTROL
    INSECURE_DESERIALIZATION
    BROKEN_AUTHENTICATION
    SENSITIVE_DATA_EXPOSURE
    WEAK_SESSION_MANAGEMENT
    PATH_PARAMETER_ATTACKS
    HTTP_REQUEST_SMUGGLING
    BUSINESS_LOGIC_BUGS
    HOST_HEADER_INJECTION
    HTTP_RESPONSE_SPLITTING
    CACHE_POISONING
    DOM_BASED_XSS
    CORS_MISCONFIGURATION
    IDOR
    HTML_INJECTION
    XML_EXTERNAL_ENTITY
    HIDDEN_PARAMETER_DISCOVERY
    INPUT_VALIDATION_BUGS
    CROSS_ORIGIN_SCRIPTING
    TEMPLATE_INJECTION
    MISCONFIGURED_SECURITY_HEADERS
    RATE_LIMITING_BYPASS
    PASSWORD_RESET_POISONING
    WEBSOCKET_SECURITY
    WEAK_ENCRYPTION
    DEPENDENCY_VULNERABILITIES
    JAVASCRIPT_PROTOTYPE_POLLUTION
}

enum ChallengeStatus {
    ON_GOING
    DONE
}

model SessionToken {
    token     String    @id
    userId    String?   @db.Uuid
    user      User?     @relation("UserSessionTokens", fields: [userId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    expiredAt DateTime?
}

model User {
    id            String         @id @default(uuid()) @db.Uuid
    username      String
    email         String         @unique
    profileImage  String?
    note          String?
    fbLink        String?
    teleLink      String?
    redditLink    String?
    linkedInLink  String?
    gitHubLink    String?
    role          UserRole       @default(USER)
    lastLoginIp   String?
    passwordHash  String
    sessionTokens SessionToken[] @relation("UserSessionTokens")
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    Challenge       Challenge[] @relation("CreatorChallenges")
    WinnerChallenge Challenge[] @relation("WinnerChallenges")
}

model Challenge {
    id         Int                @id @default(autoincrement())
    creatorId  String             @db.Uuid
    winnerId   String?            @db.Uuid
    name       String
    title      String
    targetLink String
    prize      Int
    methods    WebHackingMethod[]
    status     ChallengeStatus
    createdAt  DateTime           @default(now())
    updatedAt  DateTime           @updatedAt

    // Relations
    creator User  @relation("CreatorChallenges", fields: [creatorId], references: [id])
    winner  User? @relation("WinnerChallenges", fields: [winnerId], references: [id])
}
