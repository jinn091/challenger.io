generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
    SUPER_ADMIN
}

enum ChallengeStatus {
    ON_GOING
    DONE
}

enum ChallengeSubmissionStatus {
    PENDING
    SUCCESS
    FAIL
}

model SessionToken {
    token     String    @id
    userId    String?   @db.Uuid
    user      User?     @relation("UserSessionTokens", fields: [userId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    expiredAt DateTime?
}

model User {
    id            String         @id @default(uuid()) @db.Uuid
    username      String
    email         String         @unique
    profileImage  String?
    note          String?
    fbLink        String?
    teleLink      String?
    redditLink    String?
    linkedInLink  String?
    gitHubLink    String?
    role          UserRole       @default(USER)
    lastLoginIp   String?
    passwordHash  String
    sessionTokens SessionToken[] @relation("UserSessionTokens")
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    Challenge       Challenge[]           @relation("CreatorChallenges")
    WinnerChallenge Challenge[]           @relation("WinnerChallenges")
    submissions     ChallengeSubmission[] @relation("UserSubmissions")
}

model Challenge {
    id         Int             @id @default(autoincrement())
    creatorId  String          @db.Uuid
    winnerId   String?         @db.Uuid
    name       String
    targetLink String
    prize      Int
    methods    String[]
    status     ChallengeStatus
    note       String?
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt

    // Relations
    creator     User                  @relation("CreatorChallenges", fields: [creatorId], references: [id])
    winner      User?                 @relation("WinnerChallenges", fields: [winnerId], references: [id])
    submissions ChallengeSubmission[] @relation("ChallengeSubmissions")
}

model ChallengeSubmission {
    id             Int                       @id @default(autoincrement())
    userId         String                    @db.Uuid
    challengeId    Int
    proofOfExploit String
    status         ChallengeSubmissionStatus @default(PENDING)
    description    String
    createdAt      DateTime                  @default(now())
    updatedAt      DateTime                  @updatedAt

    challenge Challenge @relation("ChallengeSubmissions", fields: [challengeId], references: [id])
    user      User      @relation("UserSubmissions", fields: [userId], references: [id])
}
